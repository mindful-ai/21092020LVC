
# -------------------------------------------------
# LAB 1
# -------------------------------------------------

L = ['red', 'red', 'green', 'blue', 'orange']



print(L)

# OUTPUT > ['neerg', 'nedlog', 'eulb', 'egnaro', 'der']

# -------------------------------------------------
# LAB 2 - Determine if a number is prime or not
# -------------------------------------------------



# -------------------------------------------------
# LAB 3 - Word Jumble Game
# -------------------------------------------------

# Create a word list
# Pick a word
# Jumble the word
# Present it to the user
# Ask for the user's guess
# Compare and give result
# Repeat the process for rest of the words
# Give the final score


# -------------------------------------------------
# LAB 4 - Create a fibonacci module and test it
# -------------------------------------------------

# fibo.py

def genfibo(n):
  return fibolist

def checkfibo(n):
  # postuple = (left, right)
  return postuple
  
# projecty.py

# Project Y


# Generate 100 random numbers
# 1. Filter out the fibonacci numbers
# 2. Filter out those numbers which are divisible by any of the last 7 of the
#    first 12 fibonacci numbers

import fibo
import random

rn = []
for i in range(100):
    rn.append(random.randint(1, 100))

print('RANDOM : ', rn)

print('-'*60)


# Part 1

fiboref = fibo.genfibo(12)

fn = []
for n in rn:
    if(n in fiboref):
        fn.append(n)
print('Number of Fibonacci numbers: ', len(fn))
print('FIBONACCI Series Numbers: ', fn)

# Part 2

fibodiv = fiboref[-7:]
fibolist = []
for n in rn:
    for d in fibodiv:
        if(n % d == 0):
            fibolist.append(n)
            break
print('Length of FIBOLIST: ', len(fibolist))
print('FIBOLIST: ', fibolist)           


# -------------------------------------------------
# LAB 5 - Print multiplication table into a file
# -------------------------------------------------

# -------------------------------------------------
# LAB 6 - Determine the time taken to run the loop
# -------------------------------------------------

L = []
for i in range(1000):
  L.append(random.randint(1, 100))


# -------------------------------------------------
# LAB 7A - Script to organize data
# -------------------------------------------------

# Creating full path list
path = os.getcwd()
fullpaths = []
for file in files:
	fullpaths.append(os.path.join(path, file))

# Creating the list of directories to be created
extlist = []
for path in fullpaths:
	extlist.append(os.path.splitext(os.path.basename(path))[1][1:])
dirlist = list(set(extlist))

# Creating the directories
for dname in dirlist:
	os.mkdir(dname)

# Logic to move the files
for path in fullpaths:
	if(os.path.isfile(path)):
		src  = path
		dst  = os.path.split(src)
		ext  = os.path.splitext(dst[1])
		fdst = os.path.join(dst[0], ext[1][1:], dst[1])
		shutil.move(src, fdst)
		
# -------------------------------------------------
# Lab 7B - Experiment using subprocess
# -------------------------------------------------

subprocess.call('ipconfig -all', shell=True)
c = subprocess.check_output('ipconfig -all', shell=True)
c = c.decode()
lines = c.split('\r\n')
phyaddrs = []
for line in lines:
    if('Physical' in line):
        phyaddrs.append(line.split(' : ')[1])
print(phyaddrs)


# -------------------------------------------------
# LAB 8 - Student Class
# -------------------------------------------------

class student(object):


    # Data/attributes
    def __init__(self, name, cls, rid):
        print('Initializing values.....')
        pass

    # Functions/methods

    def setschoolname(self, schoolname):
        pass

    def printinfo(self):
        self.state = 'Karnataka'
        pass

    def setMaths(self, marks):
        pass

    def setPhysics(self, marks):
        pass

    def setChemistry(self, marks):
        pass

    def setBiology(self, marks):
        pass

    def calcAverage(self):
        pass

# -------------------------------------------------

	print('STATE : ', self.state)
        print('SCHOOL: ', student.schoolname)
        print('-----------------------------------')
        print('NAME: ', self.name)
        print('CLASS: ', self.cls)
        print('REG ID:', self.regid)
        print('-----------------------------------')
        print('MATHS    : ', self.maths)
        print('PHYSICS  : ', self.physics)
        print('CHEMISTRY: ', self.chemistry)
        print('BIOLOGY  : ', self.biology)
        print('-----------------------------------')
        print('AVERAGE  : ', self.average)
        print('NSTUDENTS  ------> ', student.nstudents)
        print('\n')

# -------------------------------------------------
# LAB 9 - Extended Student Class
# -------------------------------------------------

1. Extend the class student
2. Add new attributes

	self.native = native # New attribute
        self.extra = extra   # New attribute
3. Define a new function getGrade
4. Override the printinfo() to accomodate newly
   added features
   
# ------------------------- Copy this to start

class ext_student(student):

    # Attributes
    def __init__(self, name, cls, rid, native, extra=['music']):
        pass

    # Functions
    def getGrade(self): # New function in the extended class
        pass

    def printinfo(self):  # Overriding the function
        pass


# -------------------------------------------------
# LAB 10 - Operator Overloading
# -------------------------------------------------


# Starter code

class Matrix:
    def __init__(self, arr):
        self.mat = arr

    def show(self):
        print(self.mat)
        
    def __add__(self, other):
        pass

m1 = Matrix([[1,2],[3,4]])
m2 = Matrix([[4,5],[6,7]])
m3 = m1 + m2
print("The addition of Matrix: ")
m3.show()


# -------------------------------------------------
# LAB 11 - Create a decorator for adding HTML tags
# -------------------------------------------------

# Starter code

def italic(func):
    pass

def bold(func):
    pass


@bold
def message(s):
    return str(s)

print(message('Hello Oracle!'))

# -------------------------------------------------
# LAB 12 - Extract information from a resume
# -------------------------------------------------

# regex_ex.py

import re

data = ['ab', 'abc', 'a5e', 'a6f', '123 a6c', 'a5b', 'a55b', 'a555b', 'a5555b',
        'a55555b', 'a555555b', 'a5xb', '1/4', '3+2=5',
        'def ghi', 'abc ab', 'abbc', 'axcd', 'ab567v']

for item in data:
  m = re.search(r'a(55){2}\D', item)
  if m:
      print (m.group() + ' matched in ' + '\'' + item + '\'')
      
      

# resume.txt
Subject line: Senior Customer Service Representative Seeks Customer Service Team Lead Position with XYZ (Job ID #888701)

Dear Marcus,
 
Please find attached a copy of my resume for the Customer Service Team Lead Position with XYZ.
As a Senior CSR with ABC Corp, I’ve designed and supervised phone and online surveying activities 
prior to the launch of our new line of products. The result? In 7 months I’ve raised 
customer experience phone survey ratings by 58% and boosted customer retention by 27%. 
I’m sure I can translate my 9+ years of CS experience into similar results for XYZ.
Can we schedule a meeting next week to discuss solutions for making XYZ’s Customer 
Service operations more cost-effective and raising your NPS ratings in the upcoming months?

 

Sincerely,
Cynthia McKittrick
 
Senior Customer Service Representative
linkedin.com/in/cynthia-s-mckittrick
c.mckittrick@me.com
555-888-6666
 
Attachments:
Cynthia-McKittrick-Resume-XYZ.pdf

-------------------------------------------------------

# extract.py

import re
EOF = ''
# Read the file as a text

f = open( "path_to_resume.txt", "r" )
content = f.read()
f.close()
# Patterns

jobid = ''
email = ""
phone = ""
linkedin = ""
name = ""

# Apply the patterns and store what ever is extracted



m = re.search(jobid, content)
if m:
    print('JOBID     : ', m.group())

m = re.search(email, content)
if m:
    print('EMAIL     : ', m.group())

m = re.search(phone, content)
if m:
    print('PHONE     : ', m.group())

m = re.search(linkedin, content)
if m:
    print('LINKEDIN  : ', m.group())

m = re.search(name, content)
if m:
    print('NAME      : ', m.groupdict()['Name'])


# -------------------------------------------------
# LAB 13 - Unit Test
# -------------------------------------------------

# testcalc.py

import sys

from calc import Calculator



import unittest

NUMBER_1 = 3.0
NUMBER_2 = 2.0
FAILURE = 'incorrect value'


class CalculatorTest(unittest.TestCase):


    def setUp(self):
        self.calc = Calculator()

    def test_last_answer_init(self):
        pass

    def test_add(self):
        pass

    def test_subtract(self):
        pass

    def test_subtract_negative(self):
        pass

    def test_multiply(self):
        pass

    def test_divide(self):
        pass

    def test_divide_by_zero(self):
        pass

    def tearDown(self):
        pass


if __name__ == '__main__':


    unittest.main()

# -------------------------------------------------
# LAB 14 - Virtual Environments
# -------------------------------------------------


# -------------------------------------------------
# LAB 15 - Network 
# -------------------------------------------------

# Client Program

message = input(" -> ")  

while message.lower().strip() != 'bye':
     client_socket.send(message.encode())  
     data = client_socket.recv(1024).decode()  
     print('Received from server: ' + data)  
     message = input(" -> ") 

# Server Program

conn, address = server_socket.accept()  
print("Connection from: " + str(address))
----------------------------------------------------

# Logic in while loop
data = conn.recv(1024).decode()
if not data:
	break

print("from connected user: " + str(data))
data = input(' -> ')
conn.send(data.encode())


# -------------------------------------------------
# LAB 16 - Student Record
# -------------------------------------------------

# Report Generation
dottedline = '-'*70
    template = '{0:8} | {1:10} | {2:3} | {3:3} | {4:3} | {5:3} | {6:3} | {7:6} | {8:3}'
    print('CLASS REPORT')
    print(dottedline)
    print(template.format('REGID', 'NAME', 'AGE', 'P', 'C', 'M', 'B', 'AVG', 'R'))
    print(dottedline)
    for regid in dd.keys():
        name = dd[regid]['name']
        age  = dd[regid]['age']
        regid = dd[regid]['regid']
        phy = dd[regid]['phy']
        chem = dd[regid]['chem']
        math = dd[regid]['math']
        bio = dd[regid]['bio']
        avg = dd[regid]['avg']
        rank = dd[regid]['rank']
        print(template.format( regid, name, age,phy, chem, math, bio, avg, rank))
    print(dottedline)

# -------------- 1
f = open("students.csv", "r")
content = f.readlines()
f.close()

print(content)
print('-'*60 + ' > First Step')

# -------------- 2

classdict = {}

coldata = content[0]

columns = [item.strip() for item in coldata.split(',')]

for rowdata in content[1:]:
    rows = [item.strip() for item in rowdata.split(',')]
    studdict = dict(zip(columns, rows))
    classdict.setdefault(studdict['regid'], studdict)

print(classdict)
print('-'*60 + ' > Second Step')

# -------------- 3

for regid in classdict.keys():
    sum_of_subj_marks = 0
    for key in ['phy','chem', 'math', 'bio']:
        sum_of_subj_marks += float(classdict[regid][key])
    classdict[regid]['avg'] = sum_of_subj_marks / 4


print(classdict)
print('-'*60 + ' > Third Step')

# -------------- 4

avgs = [classdict[regid]['avg'] for regid in classdict.keys()]
avgs = list(set(avgs))
avgs.sort(reverse=True)
print(avgs)

rank = 1
for avg in avgs:
    for regid in classdict.keys():
        if(classdict[regid]['avg'] == avg):
            classdict[regid]['rank'] = rank
    rank += 1

print(classdict)
print('-'*60 + ' > Fourth Step')

# -------------- 5

path = r"students_updated.csv"
f = open(path, "w")
f.write(coldata)

for regid in classdict.keys():
    r = list(zip(*classdict[regid].items()))
    rowdata = ','.join([str(item) for item in r[1]]) + '\n'
    f.write(rowdata)

f.close()

print(classdict)
print('-'*60 + ' > Fifth Step')

# -------------- 6

genReport(classdict)

# -------------------------------------------------
# LAB 17 - Solve Lab 15 with Pandas
# -------------------------------------------------

import pandas as pd
df = pd.read_csv("student.csv")
df['avg'] = df[['phy', 'chem', 'math', 'bio']].mean(axis=1)

df['rank'] = df['avg'].rank()
df['rank'] = df['avg'].rank(method='dense', ascending=False)

import matplotlib.pyplot as plt
plt.bar(df['regid'], df['avg'], color='m')
plt.show()

with pd.ExcelWriter('report.xlsx') as writer:
    df.to_excel(writer)


--------------------------------------------------------------------


